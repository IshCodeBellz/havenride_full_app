// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/types.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../app/admin/metrics/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin/metrics">> = Specific
  const handler = {} as typeof import("../../app/admin/metrics/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/admin/ops/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin/ops">> = Specific
  const handler = {} as typeof import("../../app/admin/ops/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/admin/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin">> = Specific
  const handler = {} as typeof import("../../app/admin/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/admin/settings/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin/settings">> = Specific
  const handler = {} as typeof import("../../app/admin/settings/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/auth-callback/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/auth-callback">> = Specific
  const handler = {} as typeof import("../../app/auth-callback/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dispatcher/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dispatcher">> = Specific
  const handler = {} as typeof import("../../app/dispatcher/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/driver-signup/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/driver-signup">> = Specific
  const handler = {} as typeof import("../../app/driver-signup/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/driver/earnings/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/driver/earnings">> = Specific
  const handler = {} as typeof import("../../app/driver/earnings/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/driver/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/driver">> = Specific
  const handler = {} as typeof import("../../app/driver/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/driver/past-rides/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/driver/past-rides">> = Specific
  const handler = {} as typeof import("../../app/driver/past-rides/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/driver/profile/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/driver/profile">> = Specific
  const handler = {} as typeof import("../../app/driver/profile/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/driver/support/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/driver/support">> = Specific
  const handler = {} as typeof import("../../app/driver/support/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/rider/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/rider">> = Specific
  const handler = {} as typeof import("../../app/rider/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/rider/past-rides/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/rider/past-rides">> = Specific
  const handler = {} as typeof import("../../app/rider/past-rides/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/rider/profile/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/rider/profile">> = Specific
  const handler = {} as typeof import("../../app/rider/profile/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/rider/support/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/rider/support">> = Specific
  const handler = {} as typeof import("../../app/rider/support/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/role-select/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/role-select">> = Specific
  const handler = {} as typeof import("../../app/role-select/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/bookings/[id]/document/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/bookings/[id]/document">> = Specific
  const handler = {} as typeof import("../../app/api/bookings/[id]/document/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/bookings/[id]/fare/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/bookings/[id]/fare">> = Specific
  const handler = {} as typeof import("../../app/api/bookings/[id]/fare/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/bookings/[id]/messages/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/bookings/[id]/messages">> = Specific
  const handler = {} as typeof import("../../app/api/bookings/[id]/messages/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/bookings/[id]/status/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/bookings/[id]/status">> = Specific
  const handler = {} as typeof import("../../app/api/bookings/[id]/status/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/bookings/[id]/verify-pin/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/bookings/[id]/verify-pin">> = Specific
  const handler = {} as typeof import("../../app/api/bookings/[id]/verify-pin/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/bookings/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/bookings">> = Specific
  const handler = {} as typeof import("../../app/api/bookings/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/calls/bridge/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/calls/bridge">> = Specific
  const handler = {} as typeof import("../../app/api/calls/bridge/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/calls/connect/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/calls/connect">> = Specific
  const handler = {} as typeof import("../../app/api/calls/connect/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/debug/user-status/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/debug/user-status">> = Specific
  const handler = {} as typeof import("../../app/api/debug/user-status/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/drivers/set-online/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/drivers/set-online">> = Specific
  const handler = {} as typeof import("../../app/api/drivers/set-online/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/drivers/update-location/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/drivers/update-location">> = Specific
  const handler = {} as typeof import("../../app/api/drivers/update-location/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/estimate/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/estimate">> = Specific
  const handler = {} as typeof import("../../app/api/estimate/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/payments/create-intent/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/payments/create-intent">> = Specific
  const handler = {} as typeof import("../../app/api/payments/create-intent/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/users/assign-role/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/users/assign-role">> = Specific
  const handler = {} as typeof import("../../app/api/users/assign-role/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/users/ensure-role/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/users/ensure-role">> = Specific
  const handler = {} as typeof import("../../app/api/users/ensure-role/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/users/me/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/users/me">> = Specific
  const handler = {} as typeof import("../../app/api/users/me/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}





// Validate ../../app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}
